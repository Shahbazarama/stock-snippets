{"version":3,"sources":["Components/Search.jsx","Components/Tweet.jsx","Components/Feed.jsx","index.js","App.js"],"names":["Search","callback","useState","setSearch","Form","inline","onSubmit","evt","preventDefault","splitSearch","FormData","target","get","replace","split","allTweets","Promise","all","map","stock","fetch","then","responses","res","json","data","console","log","response","status","alert","forEach","search","messages","message","push","Control","name","type","placeholder","className","onChange","e","value","Button","variant","Tweet","content","tweetText","body","variablesUsed","symbols","symbol","i","length","Media","style","borderBottomStyle","paddingBottom","as","width","height","src","user","avatar_url","alt","Body","ReactHtmlParser","Date","created_at","toLocaleString","Feed","sortedData","sort","a","b","Container","Row","Col","md","span","offset","s","paddingLeft","paddingTop","listStyleType","margin","ReactDOM","render","setData","Navbar","bg","expand","Brand","document","getElementById"],"mappings":"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","file":"static/js/main.a2da17d0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nexport default function Search({ callback }){\n\n  const [search, setSearch] = useState(\"\");\n\n  const handleSubmit = (evt) => {\n      evt.preventDefault();\n      const rawSearch = new FormData(evt.target);\n\n      // separate stock terms from search form\n      const splitSearch = rawSearch.get('search').replace(/\\s/g,'').split(',');\n\n      // call api for each search term\n      const allTweets = []\n\n      Promise.all(splitSearch.map(stock => fetch(`https://cors-anywhere.herokuapp.com/https://api.stocktwits.com/api/2/streams/symbol/${stock}.json`))).then(responses =>\n        Promise.all(responses.map(res => res.json()))\n      ).then(data => {\n        console.log(data)\n        if(data[0].response.status == 404){\n        alert('Invalid search term, try GOOG or BB')\n      } else {\n        data.forEach(search => {\n          search.messages.forEach(message => {\n            allTweets.push(message)\n          })\n      })\n      callback(allTweets)\n      }\n      })\n  }\n\n  return (\n    <Form inline onSubmit={handleSubmit}>\n      <Form.Control name=\"search\" type=\"text\" placeholder=\"search for some stocks\" className=\"mr-sm-2\" onChange={e => setSearch(e.target.value)}/>\n      <Button type=\"submit\" variant=\"outline-info\" className=\"mr-sm-2\">Search</Button>\n    </Form>\n  )\n}\n","import React from 'react'\nimport { Media, Row, Col } from 'react-bootstrap'\nimport Linkify from 'react-linkify'\nimport CashtagLink from 'stocktwits-react-text-js'\nimport ReactHtmlParser from 'react-html-parser';\n\nexport default function Tweet({ content }){\n  let tweetText = content.body\n  const variablesUsed = content.symbols.map(symbol => symbol.symbol)\n  for(let i = 0; i < variablesUsed.length; i++){\n    tweetText = tweetText.replace('$' + variablesUsed[i], `<a target=\"_blank\" href=\"http://stocktwits.com/symbol/${variablesUsed[i]}\">$${variablesUsed[i]}</a>`);\n  }\n  \n  const mediaStyling = {borderBottomStyle: 'solid', paddingBottom: '4px'}\n  return (\n    <Media style={mediaStyling} as=\"li\">\n    <img\n      width={64}\n      height={64}\n      className=\"align-self-start mr-3\"\n      src={content.user.avatar_url}\n      alt=\"user avatar\"\n    />\n    <Media.Body>\n      <h5>{content.user.name}</h5>\n        <Linkify>{ ReactHtmlParser(tweetText) }</Linkify>\n      <br></br>\n      <small>{new Date(content.created_at).toLocaleString()}</small>\n    </Media.Body>\n  </Media>\n  )\n}\n","import React from 'react'\nimport Tweet from './Tweet.jsx'\nimport { Container, Col, Row, Card } from 'react-bootstrap'\n\nexport default function Feed({ data }){\n  // sort by created_at date in stocktwits system\n  const sortedData = data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n\n  const feedStyling = {paddingLeft: '0px', paddingBottom: '10px', paddingTop: '10px', listStyleType: 'none', margin: '0px'}\n  return (\n    <Container>\n      <Row>\n        <Col md={{ span: 8, offset: 2 }} s={{span:12}}>\n          <ul style={feedStyling}>\n\n            {sortedData.map( (content) => <Tweet content={content} />)}\n          </ul>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { useState } from 'react';\nimport Search from './Components/Search.jsx'\nimport Feed from './Components/Feed.jsx'\n\nimport { Container, Col, Row, Navbar } from 'react-bootstrap'\n\nexport default function App(){\n\n  const [data, setData] = useState([]);\n\n  return (\n    <>\n      <Navbar className=\"justify-content-between\" bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Navbar.Brand bg=\"light\">Stock Snippets</Navbar.Brand>\n        <Search callback={setData}/>\n      </Navbar>\n\n    <Container>\n      <Row>\n        <Col>\n          {data.length == 0 ? <h3>Search for a stock or two!</h3> : <></>}\n          <Feed data={data}/>\n        </Col>\n\n      </Row>\n    </Container>\n    </>\n  )\n}\n"],"sourceRoot":""}